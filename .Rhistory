library('DESeq2')
library(FactoMineR)
library(tidyverse)
setwd("C:/Users/shafi_l1kxhwi/Desktop/sidra_assessment-/")
count_data <- read.csv("data/method_brazilGrant.csv", header=TRUE, stringsAsFactors=FALSE,check.names = FALSE)
phen_data <- read.csv("data/UCEC_pheno.csv", header=TRUE, stringsAsFactors=FALSE)
colnames(count_data)
rownames(count_data) <- count_data$ID
count_data <- count_data[ , -which(names(count_data) %in% c("ID"))]
#check if the order of the phen_data samplenames matches with the count data
all(phen_data$samplenames == colnames(count_data))
#identify no. of cancer stages
stages_of_cancer<-as.data.frame(table(phen_data$group))
stages_of_cancer<-stages_of_cancer[c(1,3,4,2,5),]
names(stages_of_cancer) <- c('stage_cancer','count')
write.csv(stages_of_cancer, "result/stages_cancer.csv", row.names=FALSE)
#perform
sum(is.na(count_data))
any(is.na(count_data))
#assign zero to na
count_data[is.na(count_data)] <- 0
#remove rows with all zero to speed up the analysis
count_data <- count_data[rowSums(count_data) > 0, ]
View(phen_data)
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data, # the counts values for all samples in our dataset
colData = phen_data# annotation data for the samples in the counts data frame # Here we are not specifying a model
# Replace with an appropriate design variable for your analysis
)
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data, # the counts values for all samples in our dataset
colData = phen_data,
design = ~1# annotation data for the samples in the counts data frame # Here we are not specifying a model
# Replace with an appropriate design variable for your analysis
)
# Normalize and transform the data in the `DESeqDataSet` object
# using the `vst()` function from the `DESeq2` R package
dds_norm <- vst(dds)
View(dds)
# Normalize and transform the data in the `DESeqDataSet` object
# using the `vst()` function from the `DESeq2` R package
nsub<-sum( rowMeans( counts(dds, normalized=TRUE)) > 5 )
dds_norm <- vst(dds,nsub = nsub)
# Normalize and transform the data in the `DESeqDataSet` object
# using the `vst()` function from the `DESeq2` R package
nsub<-
dds_norm <- vst(dds,nsub = sum( rowMeans( counts(dds, normalized=TRUE)) > 5 ))
sum( rowMeans( counts(dds, normalized=TRUE)) > 5 )
?vst
View(count_data)
dds_norm <- vst(dds,nsub = 600)
dds_norm <- vst(dds,, blind = TRUE,nsub = 600)
dds_norm <- vst(dds, blind = TRUE,nsub = 600)
vst_transformed <- varianceStabilizingTransformation(dds, blind = TRUE)
View(phen_data)
plotPCA(
vst_transformed,
intgroup = "group"
)
PCA_result<-plotPCA(
vst_transformed,
intgroup = "group",
returnData = TRUE
)
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = cut, shape = cut)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
require(ggplot2)
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = cut, shape = cut)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
p <- ggplot(data = data, aes(x = pc1, y = pc2)) +
geom_point()
p <- ggplot(data = data, aes(x = PC1, y = PC2)) +
geom_point()
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2)) +
geom_point()
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = cut, shape = cut)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data, # the counts values for all samples in our dataset
colData = phen_data,
design = ~group# annotation data for the samples in the counts data frame # Here we are not specifying a model
# Replace with an appropriate design variable for your analysis
)
dds_norm <- vst(dds, blind = TRUE,nsub = 600)
vst_transformed <- varianceStabilizingTransformation(dds, blind = TRUE)
