library(ggplot2)
library('DESeq2')
library(FactoMineR)
library(tidyverse)
library( AnnotationDbi )
library("org.Hs.eg.db")
library(multiMiR)
library(ggplot2)
#load the files
setwd("C:/Users/shafi_l1kxhwi/Desktop/sidra_assessment-/")
count_data <- read.csv("data/method_brazilGrant.csv", header=TRUE, stringsAsFactors=FALSE,check.names = FALSE)
phen_data <- read.csv("data/UCEC_pheno.csv", header=TRUE, stringsAsFactors=FALSE)
#preprocess the data
colnames(count_data)
rownames(count_data) <- count_data$ID
count_data <- count_data[ , -which(names(count_data) %in% c("ID"))]
#check if the order of the phen_data samplenames matches with the count data
all(phen_data$samplenames == colnames(count_data))
#identify no. of cancer stages
stages_of_cancer<-as.data.frame(table(phen_data$group))
stages_of_cancer<-stages_of_cancer[c(1,3,4,2,5),]
names(stages_of_cancer) <- c('stage_cancer','count')
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data,
colData = phen_data,
design = ~group
)
sum(is.na(count_data))
any(is.na(count_data))
count_data[is.na(count_data)] <- 0
#remove rows with all zero to speed up the analysis
count_data <- count_data[rowSums(count_data) > 0, ]
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data,
colData = phen_data,
design = ~group
)
# Normalize and transform the data in the `DESeqDataSet` object
vst_transformed <- varianceStabilizingTransformation(dds, blind = TRUE)
PCA_result<-plotPCA(
vst_transformed,
intgroup = "group",
returnData = TRUE
)
require(ggplot2)
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 2) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 10) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=2) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=4) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
p
View(PCA_result)
View(count_data)
View(PCA_result)
PCA_result<-plotPCA(
vst_transformed,
intgroup = "group",
returnData = TRUE
)
View(PCA_result)
plotPCA(
vst_transformed,
intgroup = "group",
returnData = TRUE
)
View(PCA_result)
percentVar <- round(100 * attr(PCA_result, "percentVar"))
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=4) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
p <- p + stat_ellipse(geom="polygon", aes(fill = group),
alpha = 0.2,
show.legend = FALSE,
level = 0.95) +
xlab("PC 1 (68.25%)") +
ylab("PC 2 (18.37%)") +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill= "transparent"))
p
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=4)
p <- p + stat_ellipse(geom="polygon", aes(fill = group),
alpha = 0.2,
show.legend = FALSE,
level = 0.95) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill= "transparent"))
p
tiff(file="result/PCA_plot.tiff",
width=6, height=4, units="in", res=100)
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(size=4)
#add eclipse around the groups
p <- p + stat_ellipse(geom="polygon", aes(fill = group),
alpha = 0.2,
show.legend = FALSE,
level = 0.95) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill= "transparent"))
p
dev.off()
install.packages("EnhancedVolcano")
library("EnhancedVolcano")
library("EnhancedVolcano")
