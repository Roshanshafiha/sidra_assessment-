library(miRBaseConverter)
library('DESeq2')
library(FactoMineR)
library(tidyverse)
library( AnnotationDbi )
library("org.Hs.eg.db")
setwd("C:/Users/shafi_l1kxhwi/Desktop/sidra_assessment-/")
count_data <- read.csv("data/method_brazilGrant.csv", header=TRUE, stringsAsFactors=FALSE,check.names = FALSE)
phen_data <- read.csv("data/UCEC_pheno.csv", header=TRUE, stringsAsFactors=FALSE)
colnames(count_data)
rownames(count_data) <- count_data$ID
count_data <- count_data[ , -which(names(count_data) %in% c("ID"))]
#check if the order of the phen_data samplenames matches with the count data
all(phen_data$samplenames == colnames(count_data))
#identify no. of cancer stages
stages_of_cancer<-as.data.frame(table(phen_data$group))
stages_of_cancer<-stages_of_cancer[c(1,3,4,2,5),]
names(stages_of_cancer) <- c('stage_cancer','count')
write.csv(stages_of_cancer, "result/stages_cancer.csv", row.names=FALSE)
#perform
sum(is.na(count_data))
any(is.na(count_data))
#assign zero to na
count_data[is.na(count_data)] <- 0
#remove rows with all zero to speed up the analysis
count_data <- count_data[rowSums(count_data) > 0, ]
#scale the data before performing PCA analysis
summary(count_data[,1:5])
#scale the data
scale_data <- function(data){
for (i in 1:length(colnames(data))){
if (is.numeric(data[, i])==TRUE)
data[, i] <- as.numeric(scale(data[, i]))
else
data[, i] <- data[, i]
}
return (data)
}
normalised_count_data <- scale_data (count_data)
summary(normalised_count_data[,1:5])
#PCA on normalised data
pca_data<- t(normalised_count_data)
pca_result<-PCA(pca_data)
# Create a `DESeqDataSet` object
dds <- DESeqDataSetFromMatrix(
countData = count_data, # the counts values for all samples in our dataset
colData = phen_data,
design = ~group# annotation data for the samples in the counts data frame # Here we are not specifying a model
# Replace with an appropriate design variable for your analysis
)
dds_norm <- vst(dds, blind = TRUE,nsub = 600)
vst_transformed <- varianceStabilizingTransformation(dds, blind = TRUE)
PCA_result<-plotPCA(
vst_transformed,
intgroup = "group",
returnData = TRUE
)
require(ggplot2)
p <- ggplot(data = PCA_result, aes(x = PC1, y = PC2, color = group, shape = group)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_point(alpha = 0.8)
p
#perform deseq
dds$group <- relevel(dds$group, ref = "Normal")
dds_deseq <- DESeq(dds)
stages<-stages_of_cancer$stage_cancer
# Initialize an empty list to store results
res_list <- list()
# Loop through each category and perform the DESeq2 results function
for (stage in stages) {
if (stage != "Normal") { # Skip the 'healthy' category as we compare others against it
res <- results(dds_deseq, contrast = c("group", stage, "Normal"))
res_list[[stage]] <- res
}
}
library(miRBaseConverter)
result1=miRNA_AccessionToName(rownames(res_list[["StageI"]]),targetVersion="v22")
View(result1)
data("miniTestsPanomiR")
BiocManager::install("multiMiR")
library(multiMiR)
qry <- "SELECT , m.mature_mirna_id, t.target_symbol,
t.target_entrez, t.target_ensembl
FROM mirna AS m INNER JOIN mirecords AS i INNER JOIN target AS t
ON (m.mature_mirna_uid=i.mature_mirna_uid and
i.target_uid=t.target_uid)
WHERE m.mature_mirna_id='hsa-let-7a-5p'"
direct3 <- search_multimir(query = qry)
mirna_list <- c("hsa-let-7a-5p", "hsa-miR-21-5p")
# Retrieve predicted targets
mirna_targets <- get_multimir(mirna = mirna_list, table = "predicted", summary = TRUE)
View(mirna_targets)
View(mirna_targets@data)
target_genes <- unique(mirna_targets$target_symbol)
View(mirna_targets@summary)
View(mirna_targets@data)
View(mirna_targets@summary)
View(res_list)
res_list[["StageI"]]
# Loop through each category and perform the DESeq2 results function
for (stage in stages) {
if (stage != "Normal") { # Skip the 'healthy' category as we compare others against it
res <- as.data.frame(results(dds_deseq, contrast = c("group", stage, "Normal")))
res <- subset(res, padj <= 0.05)
res_list[[stage]] <- res
}
}
View(res_list)
View(res_list[["StageI"]])
example4.counts <- addmargins(table(mirna_targets@summary[, 2:3]))
example4.counts <- example4.counts[-nrow(example4.counts), ]
example4.counts <- example4.counts[order(example4.counts[, 5], decreasing = TRUE), ]
example4.counts
example4.counts <- as.data.frame(example4.counts[order(example4.counts[, 5], decreasing = TRUE), ])
View(example4.counts)
View(mirna_targets)
View(mirna_targets@summary)
View(mirna_targets@data)
target_genes <- unique(mirna_targets$target_symbol)
View(mirna_targets)
View(mirna_targets@data)
# Retrieve predicted targets
mirna_targets <- get_multimir(mirna = mirna_list, table = "predicted", summary = TRUE, predicted.cutoff = 35,
predicted.cutoff.type = "p")
View(mirna_targets)
View(mirna_targets@data)
View(mirna_targets@data)
target_genes <- unique(mirna_targets@predicted.cutoff$target_symbol)
a<-as.data.frame(mirna_targets@predicted.cutoff)
View(a)
View(mirna_targets@data)
target_genes <- unique(mirna_targets@data$target_symbol)
filtered_df <- mirna_targets %>%
filter(score == 1) %>%      # Keep only rows with score of 1
distinct(target_symbol, .keep_all = TRUE)
filtered_df <- mirna_targets@data %>%
filter(score == 1) %>%      # Keep only rows with score of 1
distinct(target_symbol, .keep_all = TRUE)
View(filtered_df)
View(res)
View(res_list)
View(res_list[["StageI"]])
names(deseq2_results))
names(res_list)
mirna_anno_results <- list()
for (disease_stage in names(res_list)) {
# Extract the miRNA IDs (rownames)
mirna_ids <- rownames(res_list[[disease_stage]])
# Perform get_multimir function for each miRNA ID
mirna_targets <- get_multimir(mirna = mirna_list, table = "predicted", summary = TRUE, predicted.cutoff = 35,
predicted.cutoff.type = "p")
mirna_targets <- mirna_targets@data %>%
filter(score == 1) %>%      # Keep only rows with score of 1
distinct(target_symbol, .keep_all = TRUE)
# Store the results in a separate list
mirna_anno_results[[disease_stage]] <- mirna_targets
}
View(mirna_anno_results)
View(mirna_anno_results[["StageI"]])
for (disease_stage in names(res_list)) {
# Extract the miRNA IDs (rownames)
mirna_ids <- rownames(res_list[[disease_stage]])
# Perform get_multimir function for each miRNA ID
mirna_targets <- get_multimir(mirna = mirna_ids, table = "predicted", summary = TRUE, predicted.cutoff = 35,
predicted.cutoff.type = "p")
mirna_targets <- mirna_targets@data %>%
filter(score == 1) %>%      # Keep only rows with score of 1
distinct(target_symbol, .keep_all = TRUE)
# Store the results in a separate list
mirna_anno_results[[disease_stage]] <- mirna_targets
}
View(res_list)
View(res_list[["StageI"]])
View(res)
# Loop through each category and perform the DESeq2 results function
for (stage in stages) {
if (stage != "Normal") { # Skip the 'healthy' category as we compare others against it
res <- as.data.frame(results(dds_deseq, contrast = c("group", stage, "Normal")))
res <- subset(res, padj <= 0.05)
res <- res %>%
filter(log2FoldChange >= 2 | log2FoldChange <= -2)
res_list[[stage]] <- res
}
}
View(res_list)
View(res_list[["StageI"]])
